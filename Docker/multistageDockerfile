# ***************** Sample MULTI_STAGE DOCKERFILE *******************************
# this Dockerfile is used to build a Node.js application
# FROM is used to specify the base image for the Docker container
# AS - this is used to name the build stage
FROM node:18-alpine AS installer 
# Set the working directory inside the container
# This is where the application code will be copied and run
WORKDIR /app
# Copy package.json and package-lock.json to the working directory
# This is necessary to install the dependencies defined in these files
COPY package*.json ./
# Install the dependencies defined in package.json
RUN npm install --production
# copy the rest of the application code to the working directory
# This includes all the source files needed to run the application
COPY . .
# Build the application
# This step compiles the source code into a production-ready format
RUN npm run build

FROM nginx:latest AS deployer
# Copy the built application from the installer stage to the nginx html directory in the container
COPY --from=installer /app/build /usr/share/nginx/html
# We are doing here: 
    # 1. using a multi-stage build to separate the build environment from the runtime environment
    # 2. we are copying packages and build files from the installer stage to the deployer stage
# by doing this, unnecessary files(Like node_modules) are not included in the final image
